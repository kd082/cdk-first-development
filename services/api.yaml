openapi: 3.0.0
info:
  title: CarsCDK
  version: 1.0.0
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  body-only:
    validateRequestBody: true
    validateRequestParameters: false
x-amazon-apigateway-request-validator: all

paths:
  /cars:
    get:
      tags:
        - Cars
      summary: List all registered cars
      description: List cars
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cars'
        '405':
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cars-get/invocations
    post:      
      x-amazon-apigateway-request-validator: body-only      
      tags:        
        - Cars      
      summary: Register a new car      
      description: Register a new car      
      operationId: addPet      
      requestBody:        
        description: Create a new pet in the store        
        content:          
          application/json:            
            schema:              
              $ref: '#/components/schemas/Car'        
        required: true      
      responses:        
        '200':          
          description: Successful operation          
          content:            
            application/json:              
              schema:                
                $ref: '#/components/schemas/Registration'        
        '405':          
          description: Invalid input      
      x-amazon-apigateway-integration:        
        type: aws_proxy        
        httpMethod: POST        
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cars-post/invocations

components:
  schemas:
    Cars:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Car'
          - $ref: '#/components/schemas/Registration'
    Car:
      type: object
      required:
        - brand
        - model
      properties:
        brand:
          type: string
          example: BMW
        model:
          type: string
          example: x7
        color:
          type: string
    Registration:
      type: object
      properties:
        registrationId:
          type: integer
          format: int64
          example: 10
        registrationDate:
          type: string
          format: date-time